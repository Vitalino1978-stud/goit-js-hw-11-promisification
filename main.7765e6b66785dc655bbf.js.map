{"version":3,"sources":["webpack:///./task-1.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then"],"mappings":"0HAMMA,EAAQ,SAAAC,GAMZ,OALgB,IAAIC,SAAQ,SAACC,EAASC,GACtCC,YAAW,WACTF,EAAQF,KACPA,OAKCK,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ,K","file":"main.7765e6b66785dc655bbf.js","sourcesContent":["\r\n// Напиши функцию delay(ms), которая возвращает промис,\r\n// переходящий в состояние \"resolved\" через ms миллисекунд.\r\n// Значением исполнившегося промиса должно быть то кол - во миллисекунд\r\n// которое передали во время вызова функции delay.\r\n\r\nconst delay = ms => {\r\n  const promise = new Promise((resolve, reject) => {\r\n  setTimeout(() => {\r\n    resolve(ms);\r\n  }, ms);\r\n  });\r\n  return promise;\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms"],"sourceRoot":""}